{"id":"main.js","dependencies":[],"generated":{"js":"// 返回API对象\n// const api = jQuery('.test')\n// 遍历所有获取的元素 添加className\n// .addClass('red') // 此处的this就是API\n// .addClass('blue')\n// .addClass('green') // 链式操作\n// 链式风格\n// 也叫做jQuery风格 window.jQuery是我们提供的全局函数\n// 特殊函数jQuery\n// jQuery(选择器)用于获取对应的元素\n// 但是它不反悔这些元素 相反 它返回一个对象 称为jQuery构造出的对象\n// 这个对象可以操作对应的元素\n// jQuery是构造函数吗 \n// 是 它确实构造出了一个对象\n// 不是 因为它不加new就能构造出一个对象 \n// 结论\n// jQuery是一个不需要加new的构造函数\n// jQuery不是常规意义上的构造函数\n// 因为jQuery使用了一些技巧\n// jQuery对象代指jQuery函数构造出来的对象\n// jQuery对象 不是 jQuery这个对象\n// const api_1 = jQuery('.test')\n// api_1.addClass('blue')\n// const api_2 = api_1.find('.child').addClass('red')\n// api_1.addClass('green')\n\n/*\njQuery('.test')\n.find('.child')\n.addClass('red')\n.addClass('blue')\n.addClass('green')\n.end()\n.addClass('yellow')\n*/\n// console.log(jQuery('.test').oldApi);\n\n/*\nconst child = jQuery('.test')\n.find('.child')\nchild.each((div) => console.log(div))\n*/\n\n/*\nconst child = jQuery('.test')\nchild.children().print()\n*/\n$('#test').find('.child').addClass('red'); // 请确保这句话成功执行"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"main.js","original":{"line":1,"column":0}},{"generated":{"line":2,"column":0},"source":"main.js","original":{"line":2,"column":0}},{"generated":{"line":3,"column":0},"source":"main.js","original":{"line":3,"column":0}},{"generated":{"line":4,"column":0},"source":"main.js","original":{"line":4,"column":4}},{"generated":{"line":5,"column":0},"source":"main.js","original":{"line":5,"column":4}},{"generated":{"line":6,"column":0},"source":"main.js","original":{"line":6,"column":4}},{"generated":{"line":7,"column":0},"source":"main.js","original":{"line":8,"column":0}},{"generated":{"line":8,"column":0},"source":"main.js","original":{"line":9,"column":0}},{"generated":{"line":9,"column":0},"source":"main.js","original":{"line":11,"column":0}},{"generated":{"line":10,"column":0},"source":"main.js","original":{"line":12,"column":0}},{"generated":{"line":11,"column":0},"source":"main.js","original":{"line":13,"column":0}},{"generated":{"line":12,"column":0},"source":"main.js","original":{"line":14,"column":0}},{"generated":{"line":13,"column":0},"source":"main.js","original":{"line":16,"column":0}},{"generated":{"line":14,"column":0},"source":"main.js","original":{"line":17,"column":0}},{"generated":{"line":15,"column":0},"source":"main.js","original":{"line":18,"column":0}},{"generated":{"line":16,"column":0},"source":"main.js","original":{"line":19,"column":0}},{"generated":{"line":17,"column":0},"source":"main.js","original":{"line":20,"column":0}},{"generated":{"line":18,"column":0},"source":"main.js","original":{"line":21,"column":0}},{"generated":{"line":19,"column":0},"source":"main.js","original":{"line":22,"column":0}},{"generated":{"line":20,"column":0},"source":"main.js","original":{"line":24,"column":0}},{"generated":{"line":21,"column":0},"source":"main.js","original":{"line":25,"column":0}},{"generated":{"line":22,"column":0},"source":"main.js","original":{"line":27,"column":0}},{"generated":{"line":23,"column":0},"source":"main.js","original":{"line":28,"column":0}},{"generated":{"line":24,"column":0},"source":"main.js","original":{"line":30,"column":0}},{"generated":{"line":25,"column":0},"source":"main.js","original":{"line":31,"column":0}},{"generated":{"line":27,"column":0},"source":"main.js","original":{"line":33,"column":0}},{"generated":{"line":28,"column":0},"source":"main.js","original":{"line":34,"column":0}},{"generated":{"line":29,"column":0},"source":"main.js","original":{"line":35,"column":0}},{"generated":{"line":30,"column":0},"source":"main.js","original":{"line":36,"column":0}},{"generated":{"line":31,"column":0},"source":"main.js","original":{"line":37,"column":0}},{"generated":{"line":32,"column":0},"source":"main.js","original":{"line":38,"column":0}},{"generated":{"line":33,"column":0},"source":"main.js","original":{"line":39,"column":0}},{"generated":{"line":34,"column":0},"source":"main.js","original":{"line":40,"column":0}},{"generated":{"line":35,"column":0},"source":"main.js","original":{"line":41,"column":0}},{"generated":{"line":36,"column":0},"source":"main.js","original":{"line":43,"column":0}},{"generated":{"line":38,"column":0},"source":"main.js","original":{"line":45,"column":0}},{"generated":{"line":39,"column":0},"source":"main.js","original":{"line":46,"column":0}},{"generated":{"line":40,"column":0},"source":"main.js","original":{"line":47,"column":0}},{"generated":{"line":41,"column":0},"source":"main.js","original":{"line":48,"column":0}},{"generated":{"line":42,"column":0},"source":"main.js","original":{"line":49,"column":0}},{"generated":{"line":44,"column":0},"source":"main.js","original":{"line":51,"column":0}},{"generated":{"line":45,"column":0},"source":"main.js","original":{"line":52,"column":0}},{"generated":{"line":46,"column":0},"source":"main.js","original":{"line":53,"column":0}},{"generated":{"line":47,"column":0},"source":"main.js","original":{"line":54,"column":0}},{"name":"$","generated":{"line":48,"column":0},"source":"main.js","original":{"line":56,"column":0}},{"generated":{"line":48,"column":1},"source":"main.js","original":{"line":56,"column":1}},{"generated":{"line":48,"column":2},"source":"main.js","original":{"line":56,"column":2}},{"generated":{"line":48,"column":9},"source":"main.js","original":{"line":56,"column":1}},{"generated":{"line":48,"column":10},"source":"main.js","original":{"line":56,"column":0}},{"name":"find","generated":{"line":48,"column":11},"source":"main.js","original":{"line":56,"column":11}},{"generated":{"line":48,"column":15},"source":"main.js","original":{"line":56,"column":0}},{"generated":{"line":48,"column":16},"source":"main.js","original":{"line":56,"column":16}},{"generated":{"line":48,"column":24},"source":"main.js","original":{"line":56,"column":0}},{"name":"addClass","generated":{"line":48,"column":26},"source":"main.js","original":{"line":56,"column":26}},{"generated":{"line":48,"column":34},"source":"main.js","original":{"line":56,"column":0}},{"generated":{"line":48,"column":35},"source":"main.js","original":{"line":56,"column":35}},{"generated":{"line":48,"column":40},"source":"main.js","original":{"line":56,"column":0}},{"generated":{"line":48,"column":43},"source":"main.js","original":{"line":56,"column":42}}],"sources":{"main.js":"// 返回API对象\n// const api = jQuery('.test')\n// 遍历所有获取的元素 添加className\n    // .addClass('red') // 此处的this就是API\n    // .addClass('blue')\n    // .addClass('green') // 链式操作\n\n// 链式风格\n// 也叫做jQuery风格 window.jQuery是我们提供的全局函数\n\n// 特殊函数jQuery\n// jQuery(选择器)用于获取对应的元素\n// 但是它不反悔这些元素 相反 它返回一个对象 称为jQuery构造出的对象\n// 这个对象可以操作对应的元素\n\n// jQuery是构造函数吗 \n// 是 它确实构造出了一个对象\n// 不是 因为它不加new就能构造出一个对象 \n// 结论\n// jQuery是一个不需要加new的构造函数\n// jQuery不是常规意义上的构造函数\n// 因为jQuery使用了一些技巧\n\n// jQuery对象代指jQuery函数构造出来的对象\n// jQuery对象 不是 jQuery这个对象\n\n// const api_1 = jQuery('.test')\n// api_1.addClass('blue')\n\n// const api_2 = api_1.find('.child').addClass('red')\n// api_1.addClass('green')\n\n/*\njQuery('.test')\n.find('.child')\n.addClass('red')\n.addClass('blue')\n.addClass('green')\n.end()\n.addClass('yellow')\n*/\n\n// console.log(jQuery('.test').oldApi);\n\n/*\nconst child = jQuery('.test')\n.find('.child')\nchild.each((div) => console.log(div))\n*/\n\n/*\nconst child = jQuery('.test')\nchild.children().print()\n*/\n\n$('#test').find('.child').addClass('red') // 请确保这句话成功执行\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},"lineCount":null}},"error":null,"hash":"2a94ad52c75f0a8b0b498d4df3ca3a2c","cacheData":{"env":{}}}