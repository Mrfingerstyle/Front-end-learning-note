{"version":3,"sources":["jquery.js"],"names":["window","jQuery","selectorOrArray","elements","document","querySelectorAll","Array","find","selector_x","array","i","length","concat","from","oldApi","each","fn","call","parent","node","indexOf","parentNode","push","children","print","console","log","addClass","className","classList","add","end","$"],"mappings":"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","file":"jquery.7a6e0748.js","sourceRoot":"../src","sourcesContent":["window.jQuery = function(selectorOrArray) {\n    // 此处的const不能改变\n    let elements\n    if (typeof selectorOrArray === 'string') {\n        elements = document.querySelectorAll(selectorOrArray)\n    } else if (selectorOrArray instanceof Array) {\n        elements = selectorOrArray\n    }\n    \n    // console.log(elements);\n    // API可以操作elements\n    // 下面的代码也是闭包 函数访问外部的变量\n    return {\n        find(selector_x) {\n            let array = []\n            for (let i = 0; i < elements.length; i++) {\n                array = array.concat(Array.from(elements[i].querySelectorAll(selector_x)))\n            }\n            // const newApi = jQuery(array)\n            // return newApi\n\n            array.oldApi = this // 此处的this就是 旧 API\n            return jQuery(array)\n        },\n        each(fn) {\n            for (let i = 0; i < elements.length; i++) {\n                fn.call(null, elements[i], i)\n            }\n            return this // this 就是API对象\n        },\n        parent() {\n            const array = []\n            this.each((node) => {\n                if (array.indexOf(node.parentNode) === -1) {\n                    array.push(node.parentNode)\n                }\n            })\n            return jQuery(array)\n        },\n        children() {\n            const array = []\n            this.each((node) => {\n                if (array.indexOf(node.parentNode) === -1) {\n                    // 展开操作符 把数组展开\n                    array.push(...node.children)\n                }\n            })\n            return jQuery(array)\n        },\n        print() {\n            console.log(elements);\n        },\n        addClass(className) {\n            for (let i = 0; i < elements.length; i++) {\n                elements[i].classList.add(className)\n            }\n            // 此处返回API 为了链式操作\n            // 也可以调用this 调用的是api.addClass\n            return this\n        },\n        end() {\n            return this.oldApi // this 就是 新 的API\n        },\n        oldApi: selectorOrArray.oldApi,\n    }\n    // 也可以在上面直接返回对象\n    // return api\n};\n\nwindow.$ = window.jQuery\n\n\n\n"]}